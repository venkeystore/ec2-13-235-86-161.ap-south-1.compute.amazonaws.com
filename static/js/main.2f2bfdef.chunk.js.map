{"version":3,"sources":["shared/components/form/Button.jsx","shared/components/form/ReactSelect.jsx","shared/components/form/Date.jsx","shared/components/form/Textbox.jsx","shared/components/form/Checkbox.jsx","shared/components/form/Textarea.jsx","shared/components/form/RadioButton.jsx","shared/components/PopUp.jsx","shared/constants/path.js","shared/constants/api.js","shared/components/Header.jsx","shared/components/ReactTable.jsx","routes/DashboardRoutes.jsx","containers/Dashboard.jsx","redux/actions/commonDataActions.js","shared/constants/actions.js","components/InitForm.jsx","components/ReConForm.jsx","containers/Init.jsx","redux/actions/initActions.js","containers/ReCon.jsx","redux/actions/reConActions.js","containers/Home.jsx","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/commonDataReducer.js","redux/reducers/initReducer.js","redux/reducers/reConReducer.js","redux/reducers/index.js","redux/index.js","index.js"],"names":["Button","this","props","nameValue","classValue","buttonName","disabled","type","name","id","className","onClick","onClickHandel","React","Component","ReactSelect","onChange","bind","validateSelect","e","onChangelHandel","validationData","target","value","valid","validationMessage","validations","length","find","element","isMulti","minlength","maxlength","options","placeholder","animatedComponents","makeAnimated","Fragment","isDisabled","closeMenuOnSelect","components","PopUp","state","display","title","body","confirmBtn","cancelBtn","show","Modal","onHide","onClose","Header","closeButton","icon","faCheck","faExclamationTriangle","Body","Footer","HOME","DEV_API","sideNavDisplay","toggleSideNav","setState","Navbar","expand","fixed","Toggle","Brand","to","routes","NavDropdown","Item","href","ReactTable","thead","tbody","actions","parentClassName","Table","responsive","striped","bordered","size","map","row","i","key","coln","j","sorting","faCaretDown","handelAction","faCaretUp","faSort","colSpan","colspan","rowSpan","rowspan","indexOf","faListOl","faPencilAlt","faTrashAlt","DashboardRoutes","exact","path","component","Home","ReCon","Init","Dashboard","getSystems","dispatch","fetch","types","then","response","json","res","getSystemsPayload","error","getSystemsError","getSystemsFailed","getSourceTable","headers","Headers","append","method","JSON","stringify","getSourceTablePayload","getSourceTableError","getSourceTableFailed","getCassandraTable","getCassandraTablePayload","getCassandraTableError","getCassandraTableFailed","processFile","processFilePayload","processFileError","processFileFailed","InitForm","formData","staticData","systems","sourceTable","cassandraTable","environments","instances","formField","formErrors","disableRunInitJob","disableProccessInitFile","disableInstanceField","Array","isArray","filter","ref","system","environment","label","instance","reset","runJob","ReConForm","frequency","disableRunReConJob","disableProccessReConFile","getInitialState","onPopupClose","initData","fieldName","Object","keys","event","prevState","myOldData","systemId","selectedSourceTable","ele","push","sourceTableId","formValid","index","console","log","sourceTables","table","cassandraTables","req","environmentName","isRecon","feedFileName","jobRunId","commonData","isLoading","handelProcessFileResPopup","setTimeout","isError","status","popUp","popUpData","history","Spinner","animation","role","mapDispatchToProps","runInitJob","runInitJobPayload","runInitJobError","runInitJobFailed","connect","commonDataReducer","initReducer","reconData","runReConJob","runReConJobPayload","runReConJobError","runReConJobFailed","reConReducer","initThead","reconThead","initTbody","iniitData","initfileProcessingRequestsPayload","fileProcessingRequests","systemName","souceTable","toString","reconTbody","reConData","reconfileProcessingRequestsPayload","initFileProcessingRequests","reconFileProcessingRequests","reqBody","initFileProcessingRequestsPayload","initFileProcessingRequestsError","initFileProcessingRequestsFailed","reconFileProcessingRequestsPayload","reconFileProcessingRequestsError","reconFileProcessingRequestsFailed","App","Boolean","window","location","hostname","match","initialState","initForm","reConForm","action","sourceTableName","refernece","cassandraTableId","cassandraTableName","initfileProcessingRequestsError","getFileProcessingRequestsError","reconfileProcessingRequestsError","rootReducer","combineReducers","enhancer","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister","store","createStore","ReactDOM","render","document","getElementById","defaultRender"],"mappings":"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","file":"static/js/main.2f2bfdef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Button extends React.Component {\r\n    render() {\r\n        const { nameValue, classValue, buttonName, disabled } = this.props;\r\n        return (\r\n            <button\r\n                type=\"button\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                className={classValue}\r\n                onClick={this.props.onClickHandel}\r\n                disabled={disabled ? disabled : false}\r\n            >\r\n                {buttonName}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nButton.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    classValue: PropTypes.string.isRequired,\r\n    buttonName: PropTypes.string.isRequired,\r\n    onClickHandel: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool,\r\n}\r\n\r\nexport default Button;","/***\r\nThis is reusable select dropdown component\r\nDeveloped using react-select package\r\n\r\nAccept dropdown options in following format,\r\n\r\n\r\nAccept validation property value in following format,\r\n[\r\n    { name: 'required' },\r\n    { name: 'minlength', minlength: 2 },\r\n    { name: 'maxlength', maxlength: 5 }\r\n]\r\n\r\n***/\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\nclass ReactSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.validateSelect = this.validateSelect.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.props.onChangelHandel({\r\n            validationData: this.validateSelect(e),\r\n            target: {\r\n                name: this.props.nameValue,\r\n                value: e ? e : ''\r\n            }\r\n        })\r\n    }\r\n\r\n    validateSelect(e) {\r\n        let validationData = [{ valid: false, validationMessage: '' }];\r\n        if (this.props.validations && this.props.validations.length > 0) {\r\n            if (this.props.validations.find(({ name }) => name === 'required')) {\r\n                validationData.valid = (e && (e.value || e.length > 0)) ? true : false;\r\n                validationData.validationMessage = validationData.valid ? '' : 'Please select ' + this.props.nameValue + ' value';\r\n            } else if (this.props.validations.find(({ name }) => name === 'minlength')) {\r\n                let element = this.props.validations.find(({ name }) => name === 'minlength');\r\n                validationData.valid = (this.props.isMulti && e && e.length >= element.minlength) ? true : false;\r\n                validationData.validationMessage = validationData.valid ? '' : 'Please select minimum ' + element.minlength + ' ' + this.props.nameValue + ' value';\r\n            } else if (this.props.validations.find(({ name }) => name === 'maxlength')) {\r\n                let element = this.props.validations.find(({ name }) => name === 'minlength');\r\n                validationData.valid = (this.props.isMulti && e && e.length >= element.maxlength) ? true : false;\r\n                validationData.validationMessage = validationData.valid ? '' : 'You can select maximum ' + element.maxlength + ' ' + this.props.nameValue + ' value';\r\n            }\r\n        }\r\n        return validationData;\r\n    }\r\n\r\n    render() {\r\n        const { nameValue, options, placeholder, value, disabled, isMulti } = this.props;\r\n        const animatedComponents = makeAnimated();\r\n        return (\r\n            <React.Fragment>\r\n                <Select\r\n                    name={nameValue}\r\n                    id={nameValue}\r\n                    placeholder={placeholder}\r\n                    onChange={this.onChange}\r\n                    onClick={this.onChange}\r\n                    isDisabled ={disabled ? true : false}\r\n                    value={value}\r\n                    options={options} // {value, label, color, isFixed}\r\n\r\n                    isMulti={isMulti}\r\n                    closeMenuOnSelect={isMulti ? false : true}\r\n                    components={animatedComponents}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nReactSelect.propTypes = {\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n    nameValue: PropTypes.string.isRequired,\r\n    options: PropTypes.any.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.any,\r\n    disabled: PropTypes.bool,\r\n    isMulti: PropTypes.bool,\r\n    validations: PropTypes.any\r\n}\r\n\r\nexport default ReactSelect;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Date extends React.Component {\r\n    render() {\r\n        const { nameValue, placeholder, readOnly, minDate, maxDate, value } = this.props;\r\n        return (\r\n            <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                placeholder={placeholder}\r\n                onChange={this.props.onChangelHandel}\r\n                onInput={this.props.onChangelHandel}\r\n                readOnly={readOnly ? readOnly : false}\r\n                min={minDate ? minDate : null}\r\n                max={maxDate ? maxDate : null}\r\n                value={value ? value : \"\"}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nDate.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    minDate: PropTypes.string,\r\n    maxDate: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    value: PropTypes.string,\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Date;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Textbox extends React.Component {\r\n    render() {\r\n        const { nameValue, placeholder, minLength, maxLength, readOnly } = this.props;\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                placeholder={placeholder}\r\n                onChange={this.props.onChangelHandel}\r\n                onInput={this.props.onChangelHandel}\r\n                minLength={minLength ? minLength : null}\r\n                maxLength={maxLength ? maxLength : null}\r\n                readOnly={readOnly ? readOnly : null}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nTextbox.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    minLength: PropTypes.string,\r\n    maxLength: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Textbox;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Checkbox extends React.Component {\r\n    render() {\r\n        const { nameValue, checked, disabled, value } = this.props;\r\n        return (\r\n            <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                onChange={this.props.onChangelHandel}\r\n                disabled={disabled ? disabled : null}\r\n                checked={checked ? checked : null}\r\n                value={value ? value : ''}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nCheckbox.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    checked: PropTypes.bool,\r\n    disabled: PropTypes.bool,\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n    value: PropTypes.string,\r\n}\r\n\r\nexport default Checkbox;","\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Textarea extends React.Component {\r\n    render() {\r\n        const { nameValue, placeholder, rows, cols, value, readOnly } = this.props;\r\n        return (\r\n            <textarea\r\n                className=\"form-control\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                placeholder={placeholder}\r\n                rows={rows ? rows : null}\r\n                cols={cols ? cols : null}\r\n                readOnly={readOnly ? readOnly : null}\r\n                onChange={this.props.onChangelHandel}\r\n                onInput={this.props.onChangelHandel}\r\n            >\r\n                {value ? value : null}\r\n            </textarea>\r\n        );\r\n    }\r\n}\r\n\r\nTextarea.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    rows: PropTypes.number,\r\n    cols: PropTypes.number,\r\n    readOnly: PropTypes.bool,\r\n    value: PropTypes.string,\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Textarea;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass RadioButton extends React.Component {\r\n    render() {\r\n        const { nameValue, checked, disabled, value } = this.props;\r\n        return (\r\n            <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                name={nameValue}\r\n                id={nameValue}\r\n                onChange={this.props.onChangelHandel}\r\n                disabled={disabled ? disabled : null}\r\n                checked={checked ? checked : null}\r\n                value={value ? value : ''}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nRadioButton.propTypes = {\r\n    nameValue: PropTypes.string.isRequired,\r\n    checked: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChangelHandel: PropTypes.func.isRequired,\r\n    value: PropTypes.string\r\n}\r\n\r\nexport default RadioButton;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nimport '../../assets/css/popUp.css';\r\n\r\nclass PopUp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        let { display, title, body, confirmBtn, cancelBtn, show } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={show} onHide={() => this.props.onClose('Cancel')} className={display + \" modal\"} >\r\n                    <Modal.Header closeButton >\r\n                        {(title && title === 'Success') && <span><FontAwesomeIcon icon={faCheck} className=\"modal-dialog-success mr-2\" /></span>}\r\n                        {(title && title === 'Warning') && <span><FontAwesomeIcon icon={faExclamationTriangle} className=\"modal-dialog-warning mr-2\" /></span>}\r\n                        {(title && title === 'Error') && <span><FontAwesomeIcon icon={faExclamationTriangle} className=\"modal-dialog-error mr-2\" /></span>}\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {body}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <button type=\"button\" className=\"btn btn-primary pull-right mr-2\" onClick={() => this.props.onClose('Confirm')}>{confirmBtn}</button>\r\n                        {cancelBtn && <button type=\"button\" className=\"btn btn-secondary pull-right\" onClick={() => this.props.onClose('Cancel')}>{cancelBtn}</button>}\r\n                        <div className=\"clearfix\"></div>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nPopUp.propTypes = {\r\n    title: PropTypes.any,\r\n    body: PropTypes.any.isRequired,\r\n    confirmBtn: PropTypes.any.isRequired,\r\n    cancelBtn: PropTypes.any,\r\n    onClose: PropTypes.func.isRequired,\r\n    show: PropTypes.bool,\r\n    display: PropTypes.string\r\n}\r\n\r\nexport default PopUp;","export const ROOT_ROUTE = \"/\";\r\nexport const HOME = \"/home\";\r\nexport const INIT_FORM = \"/init\";\r\nexport const RE_CON_FORM = \"/recon\";\r\n","export const DEV_API = 'http://192.168.3.57:8089'; /*  V: 192.168.3.58 and H: 192.168.55.17 and N: 192.168.3.57 */\r\n","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport * as routes from '../constants';\r\nimport { Navbar, NavDropdown } from 'react-bootstrap';\r\nimport '../../assets/css/layout.css';\r\n\r\nclass Header extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            sideNavDisplay: false\r\n        }\r\n        this.toggleSideNav = this.toggleSideNav.bind(this);\r\n    }\r\n\r\n    toggleSideNav() {\r\n        this.setState({\r\n            sideNavDisplay: !this.state.sideNavDisplay\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <header>\r\n                    <Navbar className=\"navbar\" expand=\"lg\" fixed=\"top\"> {/*fixed=\"top\"*/}\r\n                        <Navbar.Toggle className=\"brand mr-2\" onClick={this.toggleSideNav} />\r\n                        <Navbar.Brand className=\"brand mr-auto\">\r\n                            <NavLink to={routes.HOME} className=\"brand\">\r\n                                CASSANDRA UI TOOL\r\n                            </NavLink>\r\n                        </Navbar.Brand>\r\n                        {/* <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScN-ajOppTloQu279NdeQ7GKS7PNK8T4wrsKSkPPUaG-GxxJGj&s\" id=\"userProfileIcon\" /> */}\r\n\r\n                        <NavDropdown title=\"FirstName LastName\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item href={routes.HOME}>My Profile</NavDropdown.Item>\r\n                            <NavDropdown.Item href={routes.HOME}>Log Out</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Navbar>\r\n                </header>\r\n                    <div id={this.state.sideNavDisplay ? \"mySidenav\" : \"\"} className=\"sidenav\">\r\n                        <NavLink to={routes.HOME} onClick={this.toggleSideNav}>Home</NavLink>\r\n                        <NavLink to={routes.INIT_FORM} onClick={this.toggleSideNav}>Init</NavLink>\r\n                        <NavLink to={routes.RE_CON_FORM} onClick={this.toggleSideNav}>ReCon</NavLink>\r\n                    </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faListOl, faSort, faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass ReactTable extends Component {\r\n    render() {\r\n        let { thead, tbody, actions, parentClassName } = this.props;\r\n        return (\r\n            <div className={\"table-responsive \"+parentClassName}>\r\n                <Table responsive striped bordered size=\"sm\" className=\"card-text\">\r\n                    <thead>\r\n                        {thead && thead.map((row, i) => (\r\n                            <tr key={i}>\r\n                                {row.map((coln, j) => (\r\n                                    typeof coln === 'object'\r\n                                        ?\r\n                                            (coln.sorting === 'ASC' || coln.sorting === 'DESC' || coln.sorting === 'NOSORT')\r\n                                            ?\r\n                                            <th key={j} className=\"text-center\">\r\n                                            {coln.thead + \" \"}\r\n                                            {coln.sorting === 'ASC' && <FontAwesomeIcon icon={faCaretDown} id={\"asc\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('ASC', j)} />}\r\n                                            {coln.sorting === 'DESC' && <FontAwesomeIcon icon={faCaretUp} id={\"desc\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('DESC', j)} />}\r\n                                            {coln.sorting === 'NOSORT' && <FontAwesomeIcon icon={faSort} id={\"asc\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('NOSORT', j)} />}\r\n                                            </th>\r\n                                            :\r\n                                            <th className=\"text-center\" key={j} colSpan={coln.colspan ? coln.colspan : ''} rowSpan={coln.rowspan ? coln.rowspan : ''} >{coln.thead}</th>\r\n                                        :\r\n                                        <th className=\"text-center\" key={j}>{coln}</th>\r\n                                ))}\r\n                                {(actions && i === 0) && <th className=\"text-center\" rowSpan={thead.length > 0 ? thead.length : ''}>Actions</th>}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody>\r\n                        {tbody && tbody.map((row, i) => (\r\n                            <tr key={i}>\r\n                                {row.map((coln, j) => (\r\n                                    typeof coln === 'object'\r\n                                        ?\r\n                                        <td key={j} colSpan={coln.colspan ? coln.colspan : 0} rowSpan={coln.rowspan ? coln.rowspan : 0} >{coln.tbody}</td>\r\n                                        :\r\n                                        <td key={j}>{coln}</td>\r\n                                ))}\r\n                                {\r\n                                    actions \r\n                                    && \r\n                                    <td>\r\n                                        { actions.indexOf('list') > -1 && <FontAwesomeIcon icon={faListOl} id={\"list\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('list', row)} />}\r\n                                        &nbsp;\r\n                                        { actions.indexOf('edit') > -1 && <FontAwesomeIcon icon={faPencilAlt} id={\"edit\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('edit', row)} />}\r\n                                        &nbsp;\r\n                                        { actions.indexOf('delete') > -1 && <FontAwesomeIcon icon={faTrashAlt} id={\"delete\"+i} className=\"mr-1 clickable\" onClick={() => this.props.handelAction('delete', row)} />}\r\n                                    </td>\r\n                                }\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactTable.propTypes = {\r\n    thead: PropTypes.any.isRequired,\r\n    tbody: PropTypes.any.isRequired,\r\n    actions: PropTypes.any,\r\n    handelAction: PropTypes.func,\r\n    parentClassName: PropTypes.string\r\n};\r\n\r\nexport default ReactTable;","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport * as routes from '../shared/constants';\r\n\r\nimport { Home, Init, ReCon } from '../containers';\r\n\r\nclass DashboardRoutes extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid py-3\">\r\n                <Switch>\r\n                    <Route exact path={routes.ROOT_ROUTE} component={Home} />\r\n                    <Route exact path={routes.HOME} component={Home} />\r\n                    <Route exact path={routes.RE_CON_FORM} component={ReCon} />\r\n                    <Route path={routes.INIT_FORM} component={Init} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardRoutes;","import React, { Component } from \"react\";\r\n\r\nimport { Header } from '../shared';\r\nimport { DashboardRoutes } from '../routes';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Header />\r\n                <div className=\"mt-5 d-flex align-items-stretch\">\r\n                    <div className=\"page-holder w-100 d-flex flex-wrap\">\r\n                        <DashboardRoutes />\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import * as types from '../../shared/constants';\r\n\r\nconst getSystemsStarted = () => ({\r\n    type: types.GET_SYSTEM_STARTED\r\n});\r\n\r\nconst getSystemsSucceeded = data => ({\r\n    type: types.GET_SYSTEM_SUCCEEDED,\r\n    getSystemsPayload: data\r\n});\r\n\r\nconst getSystemsFailed = error => ({\r\n    type: types.GET_SYSTEM_FAILED,\r\n    getSystemsError: error,\r\n    error: true\r\n});\r\n\r\nexport const getSystems = () => {\r\n    return function (dispatch) {\r\n        dispatch(getSystemsStarted());\r\n        return fetch(types.DEV_API + \"/systems\")\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(getSystemsSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(getSystemsFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\nconst getSourceTableStarted = () => ({\r\n    type: types.GET_SOURCE_TABLE_STARTED\r\n});\r\n\r\nconst getSourceTableSucceeded = data => ({\r\n    type: types.GET_SOURCE_TABLE_SUCCEEDED,\r\n    getSourceTablePayload: data\r\n});\r\n\r\nconst getSourceTableFailed = error => ({\r\n    type: types.GET_SOURCE_TABLE_FAILED,\r\n    getSourceTableError: error,\r\n    error: true\r\n});\r\n\r\nexport const getSourceTable = (body) => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    return function (dispatch) {\r\n        dispatch(getSourceTableStarted());\r\n        return fetch(types.DEV_API + \"/sourceTables\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(getSourceTableSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(getSourceTableFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\nconst getCassandraTableStarted = () => ({\r\n    type: types.GET_CASSANDRA_TABLE_STARTED\r\n});\r\n\r\nconst getCassandraTableSucceeded = data => ({\r\n    type: types.GET_CASSANDRA_TABLE_SUCCEEDED,\r\n    getCassandraTablePayload: data\r\n});\r\n\r\nconst getCassandraTableFailed = error => ({\r\n    type: types.GET_CASSANDRA_TABLE_FAILED,\r\n    getCassandraTableError: error,\r\n    error: true\r\n});\r\n\r\nexport const getCassandraTable = (body) => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    return function (dispatch) {\r\n        dispatch(getCassandraTableStarted());\r\n        return fetch(types.DEV_API + \"/cassandraTables\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(getCassandraTableSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(getCassandraTableFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\nconst processFileStarted = () => ({\r\n    type: types.PROCESS_FILE_STARTED\r\n});\r\n\r\nconst processFileSucceeded = data => ({\r\n    type: types.PROCESS_FILE_SUCCEEDED,\r\n    processFilePayload: data\r\n});\r\n\r\nconst processFileFailed = error => ({\r\n    type: types.PROCESS_FILE_FAILED,\r\n    processFileError: error,\r\n    error: true\r\n});\r\n\r\nexport const processFile = (body) => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    return function (dispatch) {\r\n        dispatch(processFileStarted());\r\n        return fetch(types.DEV_API + \"/processFile\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(processFileSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(processFileFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\n","export const GET_SYSTEM_STARTED = 'GET_SYSTEM_STARTED';\r\nexport const GET_SYSTEM_SUCCEEDED = 'GET_SYSTEM_SUCCEEDED';\r\nexport const GET_SYSTEM_FAILED = 'GET_SYSTEM_FAILED';\r\n\r\nexport const GET_SOURCE_TABLE_STARTED = 'GET_SOURCE_TABLE_STARTED';\r\nexport const GET_SOURCE_TABLE_SUCCEEDED = 'GET_SOURCE_TABLE_SUCCEEDED';\r\nexport const GET_SOURCE_TABLE_FAILED = 'GET_SOURCE_TABLE_FAILED';\r\n\r\nexport const GET_CASSANDRA_TABLE_STARTED = 'GET_CASSANDRA_TABLE_STARTED';\r\nexport const GET_CASSANDRA_TABLE_SUCCEEDED = 'GET_CASSANDRA_TABLE_SUCCEEDED';\r\nexport const GET_CASSANDRA_TABLE_FAILED = 'GET_CASSANDRA_TABLE_FAILED';\r\n\r\nexport const RUN_INIT_JOB_STARTED = 'RUN_INIT_JOB_STARTED';\r\nexport const RUN_INIT_JOB_SUCCEEDED = 'RUN_INIT_JOB_SUCCEEDED';\r\nexport const RUN_INIT_JOB_FAILED = 'RUN_INIT_JOB_FAILED';\r\n\r\nexport const RUN_RECON_JOB_STARTED = 'RUN_RECON_JOB_STARTED';\r\nexport const RUN_RECON_JOB_SUCCEEDED = 'RUN_RECON_JOB_SUCCEEDED';\r\nexport const RUN_RECON_JOB_FAILED = 'RUN_RECON_JOB_FAILED';\r\n\r\nexport const PROCESS_FILE_STARTED = 'PROCESS_FILE_STARTED';\r\nexport const PROCESS_FILE_SUCCEEDED = 'PROCESS_FILE_SUCCEEDED';\r\nexport const PROCESS_FILE_FAILED = 'PROCESS_FILE_FAILED';\r\n\r\nexport const INIT_FILE_PROCESSING_REQUESTS_STARTED = 'INIT_FILE_PROCESSING_REQUESTS_STARTED';\r\nexport const INIT_FILE_PROCESSING_REQUESTS_SUCCEEDED = 'INIT_FILE_PROCESSING_REQUESTS_SUCCEEDED';\r\nexport const INIT_FILE_PROCESSING_REQUESTS_FAILED = 'INIT_FILE_PROCESSING_REQUESTS_FAILED';\r\n\r\nexport const RECON_FILE_PROCESSING_REQUESTS_STARTED = 'RECON_FILE_PROCESSING_REQUESTS_STARTED';\r\nexport const RECON_FILE_PROCESSING_REQUESTS_SUCCEEDED = 'RECON_FILE_PROCESSING_REQUESTS_SUCCEEDED';\r\nexport const RECON_FILE_PROCESSING_REQUESTS_FAILED = 'RECON_FILE_PROCESSING_REQUESTS_FAILED';","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ReactSelect, Button } from \"../shared\";\r\n\r\nclass InitForm extends React.Component {\r\n    render() {\r\n        const { systems, sourceTable, cassandraTable, environments, instances } = this.props.formData.staticData;\r\n        const { formField, formErrors, disableRunInitJob, disableProccessInitFile } = this.props.formData;\r\n\r\n        let disableInstanceField = false;\r\n        if(formField && formField.sourceTable && Array.isArray(formField.sourceTable)){\r\n            const tempArr = formField.sourceTable.filter(value => value.ref && value.ref === true);\r\n            disableInstanceField = tempArr.length > formField.sourceTable.length;\r\n        }\r\n        return (\r\n            <form className=\"col-lg-4 col-md-8 col-sm-12 border\">\r\n                <div className=\"form-group\">\r\n                    <label>System <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"system\" options={systems} placeholder=\"Select System\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={formField.system} />\r\n                    {formErrors.system && <div className=\"text-danger\">{formErrors.system}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Source Table <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"sourceTable\" options={sourceTable} placeholder=\"Select Source Tables\" onChangelHandel={this.props.onChange} isMulti={true} validations={[{ name: 'required' }]} value={formField.sourceTable} />\r\n                    {formErrors.sourceTable && <div className=\"text-danger\">{formErrors.sourceTable}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Cassandra Table <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"cassandraTable\" options={cassandraTable} placeholder=\"Select Cassandra Tables\" onChangelHandel={this.props.onChange} isMulti={true} validations={[{ name: 'required' }]} value={formField.cassandraTable} />\r\n                    {formErrors.cassandraTable && <div className=\"text-danger\">{formErrors.cassandraTable}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Environment <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"environment\" options={environments} placeholder=\"Select Environment\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={formField.environment} />\r\n                    {formErrors.environments && <div className=\"text-danger\">{formErrors.environment}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Instance <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"instance\" options={instances} placeholder=\"Select Instance\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={disableInstanceField ? {value: 'East', label: 'East'} : formField.instance} disabled={disableInstanceField ? true : false} />\r\n                    {formErrors.instances && <div className=\"text-danger\">{formErrors.instance}</div>}\r\n                </div>\r\n                <div className=\"form-group text-right\">\r\n                    <Button nameValue=\"init-reset\" classValue=\"secondary mr-2\" buttonName=\"Reset\" onClickHandel={this.props.reset} />\r\n                    <Button nameValue=\"init-job-submit\" classValue=\"primary mr-2\" buttonName=\"Run Init Job\" onClickHandel={this.props.runJob} disabled={disableRunInitJob} />\r\n                    <Button nameValue=\"init-process-submit\" classValue=\"primary mr-2\" buttonName=\"Process Init File\" onClickHandel={this.props.processFile} disabled={disableProccessInitFile} />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nInitForm.propTypes = {\r\n    onChange: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired,\r\n    runJob: PropTypes.func.isRequired,\r\n    processFile: PropTypes.func.isRequired,\r\n    formData: PropTypes.any\r\n};\r\n\r\nexport default InitForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ReactSelect, Button } from \"../shared\";\r\n\r\nclass ReConForm extends React.Component {\r\n    render() {\r\n        const { systems, sourceTable, cassandraTable, environments, instances, frequency } = this.props.formData.staticData;\r\n        const { formField, formErrors, disableRunReConJob, disableProccessReConFile } = this.props.formData;\r\n\r\n        let disableInstanceField = false;\r\n        if(formField && formField.sourceTable && Array.isArray(formField.sourceTable)){\r\n            const tempArr = formField.sourceTable.filter(value => value.ref && value.ref === true);\r\n            disableInstanceField = tempArr.length > formField.sourceTable.length;\r\n        }\r\n        return (\r\n            <form className=\"col-lg-4 col-md-8 col-sm-12 border\">\r\n                <div className=\"form-group\">\r\n                <label>System <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"system\" options={systems} placeholder=\"Select System\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={formField.system} />\r\n                    {formErrors.system && <div className=\"text-danger\">{formErrors.system}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Source Table <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"sourceTable\" options={sourceTable} placeholder=\"Select Source Tables\" onChangelHandel={this.props.onChange} isMulti={true} validations={[{ name: 'required' }]} value={formField.sourceTable} />\r\n                    {formErrors.sourceTable && <div className=\"text-danger\">{formErrors.sourceTable}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Cassandra Table <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"cassandraTable\" options={cassandraTable} placeholder=\"Select Cassandra Tables\" onChangelHandel={this.props.onChange} isMulti={true} validations={[{ name: 'required' }]} value={formField.cassandraTable} />\r\n                    {formErrors.cassandraTable && <div className=\"text-danger\">{formErrors.cassandraTable}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Environment <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"environment\" options={environments} placeholder=\"Select Environment\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={formField.environment} />\r\n                    {formErrors.environments && <div className=\"text-danger\">{formErrors.environment}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Instance <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"instance\" options={instances} placeholder=\"Select Instance\" onChangelHandel={this.props.onChange} validations={[{ name: 'required' }]} value={disableInstanceField ? {value: 'East', label: 'East'} : formField.instance} disabled={disableInstanceField ? true : false} />\r\n                    {formErrors.instances && <div className=\"text-danger\">{formErrors.instance}</div>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Frequency <span className=\"text-danger\">*</span></label>\r\n                    <ReactSelect nameValue=\"frequency\" options={frequency} placeholder=\"Select Frequency\" onChangelHandel={this.props.onChange} value={formField.frequency} validations={[{name: 'required'}]}/>\r\n                    {formErrors.frequency && <div className=\"text-danger\">{formErrors.frequency}</div>}\r\n                </div>\r\n                <div className=\"form-group text-right\">\r\n                    <Button nameValue=\"recon-reset\" classValue=\"secondary mr-2\" buttonName=\"Reset\" onClickHandel={this.props.reset} />\r\n                    <Button nameValue=\"recon-job-submit\" classValue=\"primary mr-2\" buttonName=\"Run ReCon Job\" onClickHandel={this.props.runJob} disabled={disableRunReConJob} />\r\n                    <Button nameValue=\"recon-process-submit\" classValue=\"primary mr-2\" buttonName=\"Process ReCon File\" onClickHandel={this.props.processFile} disabled={disableProccessReConFile} />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nReConForm.propTypes = {\r\n    onChange: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired,\r\n    runJob: PropTypes.func.isRequired,\r\n    processFile: PropTypes.func.isRequired,\r\n    formData: PropTypes.any\r\n};\r\n\r\nexport default ReConForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { getSystems, getSourceTable, getCassandraTable, runInitJob, processFile } from '../redux/actions';\r\nimport { InitForm } from \"../components\";\r\nimport { PopUp } from \"../shared\";\r\n\r\nclass Init extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getInitialState = this.getInitialState.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runJob = this.runJob.bind(this);\r\n        this.processFile = this.processFile.bind(this);\r\n        this.onPopupClose = this.onPopupClose.bind(this);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState() {\r\n        return {\r\n            ...this.props.initData\r\n        }\r\n    }\r\n\r\n    reset(fieldName = '') {\r\n        let formField = { ...this.state.formField };\r\n        let formErrors = { ...this.state.formErrors };\r\n        switch (fieldName) {\r\n            case 'system':\r\n                formField.system = '';\r\n                formErrors.system = '';\r\n                break;\r\n            case 'sourceTable':\r\n                formField.sourceTable = '';\r\n                formErrors.sourceTable = '';\r\n                break;\r\n            case 'cassandraTable':\r\n                formField.cassandraTable = '';\r\n                formErrors.cassandraTable = '';\r\n                break;\r\n            case 'environment':\r\n                formField.environment = '';\r\n                formErrors.environment = '';\r\n                break;\r\n            case 'instance':\r\n                formField.instance = '';\r\n                formErrors.instance = '';\r\n                break;\r\n            default:\r\n                Object.keys(formField).map((element) => {\r\n                    formField[element] = '';\r\n                    return formField;\r\n                })\r\n                Object.keys(formErrors).map((element) => {\r\n                    formErrors[element] = '';\r\n                    return formErrors;\r\n                })\r\n                break;\r\n        }\r\n        this.setState({\r\n            formErrors: formErrors,\r\n            formField: formField,\r\n            disableRunInitJob: true,\r\n            disableProccessInitFile: true\r\n        });\r\n    }\r\n\r\n    async onChange(event) {\r\n        // Set form field value\r\n        const { name, value } = event.target;\r\n\r\n        await this.setState(prevState => {\r\n            let myOldData = { ...prevState.formField };\r\n            myOldData[name] = value;\r\n            return {\r\n                formField: myOldData\r\n            };\r\n        });\r\n        // Fetch dependent data and set validation messages\r\n        const { valid, validationMessage } = event.validationData;\r\n        let formErrors = { ...this.state.formErrors };\r\n        switch (name) {\r\n            case 'system':\r\n                this.reset('sourceTable');\r\n                this.reset('cassandraTable');\r\n                this.reset('instance');\r\n                formErrors.system = (!valid && validationMessage) ? validationMessage : '';\r\n                this.props.getSourceTable({ systemId: value.value });\r\n                break;\r\n            case 'sourceTable':\r\n                this.reset('cassandraTable');\r\n                this.reset('instance');\r\n                let selectedSourceTable = [];\r\n                if (value && Array.isArray(value)) {\r\n                    value.map((ele) => {\r\n                        selectedSourceTable.push(ele.value);\r\n                        return selectedSourceTable;\r\n                    });\r\n                }\r\n                formErrors.sourceTable = (!valid && validationMessage) ? validationMessage : '';\r\n                this.props.getCassandraTable({ sourceTableId: selectedSourceTable });\r\n                break;\r\n            case 'cassandraTable':\r\n                formErrors.cassandraTable = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            case 'environment':\r\n                formErrors.environment = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            case 'instance':\r\n                formErrors.instance = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // Check form is valid or not and enable/disable the button\r\n        let formValid = [];\r\n        if (this.state.formField.system && this.state.formField.sourceTable && this.state.formField.cassandraTable && this.state.formField.environment && this.state.formField.instance) {\r\n            Object.keys(formErrors).map((element, index) => {\r\n                if (formErrors[element] === '') {\r\n                    formValid.push(true);\r\n                } else {\r\n                    formValid.push(false);\r\n                }\r\n                return formValid;\r\n            });\r\n        } else {\r\n            formValid.push(false);\r\n        }\r\n        // Update related values\r\n        this.setState({\r\n            formErrors: formErrors,\r\n            disableRunInitJob: formValid.indexOf(false) >= 0 ? true : false,\r\n            disableProccessInitFile: formValid.indexOf(false) >= 0 ? true : false\r\n        });\r\n    }\r\n\r\n    runJob() {\r\n        console.log(this.state);\r\n    }\r\n\r\n    processFile() {\r\n        const { system, sourceTable, cassandraTable, environment, instance } = this.state.formField;\r\n        let sourceTables = [];\r\n        sourceTable.map(table => sourceTables.push(table.value));\r\n\r\n        let cassandraTables = [];\r\n        cassandraTable.map(table => cassandraTables.push(table.value));\r\n\r\n        const req = {\r\n            systemId: system.value,\r\n            sourceTable: sourceTables,\r\n            cassandraTable: cassandraTables,\r\n            environmentName: environment.value,\r\n            instance: instance.value,\r\n            isRecon: 0,\r\n            frequency: null,\r\n            feedFileName: null,\r\n            jobRunId: 1\r\n        };\r\n        this.props.processFile(req);\r\n        if (this.props.commonData.processFilePayload || this.props.commonData.processFileError || this.props.commonData.isLoading === false) {\r\n            this.handelProcessFileResPopup();\r\n        } else {\r\n            setTimeout(function () {\r\n                this.handelProcessFileResPopup();\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n\r\n    handelProcessFileResPopup() {\r\n        const isError = ((this.props.commonData && this.props.commonData.processFileError) || (this.props.commonData.processFilePayload && this.props.commonData.processFilePayload.status !== 200));\r\n        if (!isError) {\r\n            this.reset();\r\n        }\r\n        const popUp = {\r\n            display: \"show\",\r\n            title: !isError ? 'Success' : 'Error',\r\n            body: !isError ? 'File Processing is in progress, please do not close the browser.' : 'Error to submit request',\r\n            confirmBtn: \"Okay\",\r\n            cancelBtn: \"\",\r\n        };\r\n        this.setState({\r\n            popUpData: popUp\r\n        });\r\n    }\r\n\r\n    onPopupClose() {\r\n        const popUp = {\r\n            display: \"hide\",\r\n            title: \"\",\r\n            body: \"\",\r\n            confirmBtn: \"\",\r\n            cancelBtn: \"\",\r\n        };\r\n        this.setState({\r\n            popUpData: popUp\r\n        });\r\n        const isError = ((this.props.commonData && this.props.commonData.processFileError) || (this.props.commonData.processFilePayload && this.props.commonData.processFilePayload.status !== 200));\r\n        if(!isError) {\r\n            this.props.history.push('/home');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const formData = {\r\n            ...this.state,\r\n            ...this.props.commonData\r\n        };\r\n        const { popUpData } = this.state;\r\n        return (\r\n            <div className=\"row justify-content-md-center\">\r\n                {\r\n                    this.props.commonData.isLoading === true\r\n                    &&\r\n                    <div className=\"spinnerWrapper\">\r\n                        <Spinner className=\"spinner\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    </div>\r\n                }\r\n                {\r\n                    (this.props && this.props.commonData && this.props.initData)\r\n                    &&\r\n                    <InitForm onChange={this.onChange} reset={this.reset} runJob={this.runJob} processFile={this.processFile} formData={formData}></InitForm>\r\n                }\r\n                {\r\n                    (popUpData && popUpData.display === 'show')\r\n                    &&\r\n                    <PopUp\r\n                        title={popUpData.title}\r\n                        body={popUpData.body}\r\n                        confirmBtn={popUpData.confirmBtn}\r\n                        cancelBtn={popUpData.cancelBtn}\r\n                        onClose={this.onPopupClose}\r\n                        show={popUpData.display === 'show' ? true : false}\r\n                        display={popUpData.display} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSystems();\r\n    }\r\n}\r\n\r\nInit.propTypes = {\r\n    getSystems: PropTypes.func.isRequired,\r\n    getSourceTable: PropTypes.func.isRequired,\r\n    getCassandraTable: PropTypes.func.isRequired,\r\n    runInitJob: PropTypes.func.isRequired,\r\n    processFile: PropTypes.func.isRequired,\r\n\r\n    commonData: PropTypes.any,\r\n    initData: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    commonData: state.commonDataReducer,\r\n    initData: state.initReducer\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getSystems,\r\n    getSourceTable,\r\n    getCassandraTable,\r\n    runInitJob,\r\n    processFile\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Init);","import * as types from '../../shared/constants';\r\n\r\nconst runInitJobStarted = () => ({\r\n    type: types.RUN_INIT_JOB_STARTED\r\n});\r\n\r\nconst runInitJobSucceeded = data => ({\r\n    type: types.RUN_INIT_JOB_SUCCEEDED,\r\n    runInitJobPayload: data\r\n});\r\n\r\nconst runInitJobFailed = error => ({\r\n    type: types.RUN_INIT_JOB_FAILED,\r\n    runInitJobError: error,\r\n    error: true\r\n});\r\n\r\nexport const runInitJob = (body) => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    return function (dispatch) {\r\n        dispatch(runInitJobStarted());\r\n        return fetch(types.DEV_API + \"/runInitJob\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(runInitJobSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(runInitJobFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\nconst initFileProcessingRequestsStarted = () => ({\r\n    type: types.INIT_FILE_PROCESSING_REQUESTS_STARTED\r\n});\r\n\r\nconst initFileProcessingRequestsSucceeded = data => ({\r\n    type: types.INIT_FILE_PROCESSING_REQUESTS_SUCCEEDED,\r\n    initFileProcessingRequestsPayload: data\r\n});\r\n\r\nconst initFileProcessingRequestsFailed = error => ({\r\n    type: types.INIT_FILE_PROCESSING_REQUESTS_FAILED,\r\n    initFileProcessingRequestsError: error,\r\n    error: true\r\n});\r\n\r\nexport const initFileProcessingRequests = () => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    const reqBody = {\r\n        isRecon : 0\r\n    };\r\n\r\n    return function (dispatch) {\r\n        dispatch(initFileProcessingRequestsStarted());\r\n        return fetch(types.DEV_API + \"/getProcessingRequests\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(reqBody),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(initFileProcessingRequestsSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(initFileProcessingRequestsFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSystems, getSourceTable, getCassandraTable, runReConJob, processFile } from '../redux/actions';\r\nimport { ReConForm } from \"../components\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { PopUp } from \"../shared\";\r\n\r\nclass ReCon extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.getInitialState = this.getInitialState.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runJob = this.runJob.bind(this);\r\n        this.processFile = this.processFile.bind(this);\r\n        this.onPopupClose = this.onPopupClose.bind(this);\r\n        this.handelProcessFileResPopup = this.handelProcessFileResPopup.bind(this);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState() {\r\n        return {\r\n            ...this.props.reconData\r\n        }\r\n    }\r\n\r\n    async reset(fieldName = '') {\r\n        let formField = { ...this.state.formField };\r\n        let formErrors = { ...this.state.formErrors };\r\n        switch (fieldName) {\r\n            case 'system':\r\n                formField.system = '';\r\n                formErrors.system = '';\r\n                break;\r\n            case 'sourceTable':\r\n                formField.sourceTable = '';\r\n                formErrors.sourceTable = '';\r\n                break;\r\n            case 'cassandraTable':\r\n                formField.cassandraTable = '';\r\n                formErrors.cassandraTable = '';\r\n                break;\r\n            case 'environment':\r\n                formField.environment = '';\r\n                formErrors.environment = '';\r\n                break;\r\n            case 'instance':\r\n                formField.instance = '';\r\n                formErrors.instance = '';\r\n                break;\r\n            case 'frequency':\r\n                formField.frequency = '';\r\n                formErrors.frequency = '';\r\n                break;\r\n            default:\r\n                Object.keys(formField).map((element) => {\r\n                    formField[element] = '';\r\n                    return formField;\r\n                })\r\n                Object.keys(formErrors).map((element) => {\r\n                    formErrors[element] = '';\r\n                    return formErrors;\r\n                })\r\n                break;\r\n        }\r\n        await this.setState({\r\n            formErrors: formErrors,\r\n            formField: formField\r\n        });\r\n    }\r\n\r\n    async onChange(event) {\r\n        // Set form field value\r\n        const { name, value } = event.target;\r\n        await this.setState(prevState => {\r\n            let myOldData = { ...prevState.formField };\r\n            myOldData[name] = value;\r\n            return {\r\n                formField: myOldData\r\n            }\r\n        });\r\n        // Fetch dependent data and set validation messages\r\n        const { valid, validationMessage } = event.validationData;\r\n        let formErrors = { ...this.state.formErrors };\r\n        switch (name) {\r\n            case 'system':\r\n                this.reset('sourceTable');\r\n                this.reset('cassandraTable');\r\n                this.reset('instance');\r\n                formErrors.system = (!valid && validationMessage) ? validationMessage : '';\r\n                this.props.getSourceTable({ systemId: value.value });\r\n                break;\r\n            case 'sourceTable':\r\n                this.reset('cassandraTable');\r\n                this.reset('instance');\r\n                let selectedSourceTable = [];\r\n                if (value && Array.isArray(value)) {\r\n                    value.map((ele) => {\r\n                        selectedSourceTable.push(ele.value);\r\n                        return selectedSourceTable;\r\n                    });\r\n                }\r\n                formErrors.sourceTable = (!valid && validationMessage) ? validationMessage : '';\r\n                this.props.getCassandraTable({ sourceTableId: selectedSourceTable });\r\n                break;\r\n            case 'cassandraTable':\r\n                formErrors.cassandraTable = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            case 'environment':\r\n                formErrors.environment = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            case 'instance':\r\n                formErrors.instance = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            case 'frequency':\r\n                formErrors.frequency = (!valid && validationMessage) ? validationMessage : '';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // Check form is valid or not and enable/disable the button\r\n        let formValid = [];\r\n        if (this.state.formField.system && this.state.formField.sourceTable && this.state.formField.cassandraTable && this.state.formField.environment && this.state.formField.instance && this.state.formField.frequency) {\r\n            Object.keys(formErrors).map((element, index) => {\r\n                if (formErrors[element] === '') {\r\n                    formValid.push(true);\r\n                } else {\r\n                    formValid.push(false);\r\n                }\r\n                return formValid;\r\n            });\r\n        } else {\r\n            formValid.push(false);\r\n        }\r\n        // Update related values\r\n        await this.setState({\r\n            formErrors: formErrors,\r\n            disableRunReConJob: formValid.indexOf(false) >= 0 ? true : false,\r\n            disableProccessReConFile: formValid.indexOf(false) >= 0 ? true : false\r\n        });\r\n    }\r\n\r\n    runJob() {\r\n\r\n    }\r\n\r\n    processFile() {\r\n        const { system, sourceTable, cassandraTable, environment, instance, frequency } = this.state.formField;\r\n        let sourceTables = [];\r\n        sourceTable.map(table => sourceTables.push(table.value));\r\n\r\n        let cassandraTables = [];\r\n        cassandraTable.map(table => cassandraTables.push(table.value));\r\n\r\n        const req = {\r\n            systemId: system.value,\r\n            sourceTable: sourceTables,\r\n            cassandraTable: cassandraTables,\r\n            environmentName: environment.value,\r\n            instance: instance.value,\r\n            isRecon: 1,\r\n            frequency: frequency.value,\r\n            feedFileName: null,\r\n            jobRunId: 1,\r\n        };\r\n        this.props.processFile(req);\r\n        if (this.props.commonData.processFilePayload || this.props.commonData.processFileError || this.props.commonData.isLoading === false) {\r\n            this.handelProcessFileResPopup();\r\n        } else {\r\n            setTimeout(function () {\r\n                this.handelProcessFileResPopup();\r\n            }.bind(this), 5000);\r\n        }\r\n    }\r\n\r\n    handelProcessFileResPopup() {\r\n        const isError = ((this.props.commonData && this.props.commonData.processFileError) || (this.props.commonData.processFilePayload && this.props.commonData.processFilePayload.status !== 200));\r\n        console.log(this.props.commonData);        \r\n        console.log(this.props.commonData.processFileError);        \r\n        console.log(this.props.commonData.processFilePayload);        \r\n        console.log(this.props.commonData.processFilePayload.status);        \r\n        console.log(isError);        \r\n        if (!isError) {\r\n            this.reset();\r\n        }\r\n        const popUp = {\r\n            display: \"show\",\r\n            title: !isError ? 'Success' : 'Error',\r\n            body: !isError ? 'File Processing is in progress, please do not close the browser.' : 'Error to submit request',\r\n            confirmBtn: \"Okay\",\r\n            cancelBtn: \"\",\r\n        };\r\n        this.setState({\r\n            popUpData: popUp\r\n        });\r\n    }\r\n\r\n    onPopupClose() {\r\n        const popUp = {\r\n            display: \"hide\",\r\n            title: \"\",\r\n            body: \"\",\r\n            confirmBtn: \"\",\r\n            cancelBtn: \"\",\r\n        };\r\n        this.setState({\r\n            popUpData: popUp\r\n        });\r\n        const isError = ((this.props.commonData && this.props.commonData.processFileError) || (this.props.commonData.processFilePayload && this.props.commonData.processFilePayload.status !== 200));\r\nconsole.log(isError);        \r\n        if(!isError) {\r\n            this.props.history.push('/home');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const formData = {\r\n            ...this.state,\r\n            ...this.props.commonData\r\n        };\r\n        const { popUpData } = this.state;\r\n        return (\r\n            <div className=\"row justify-content-md-center\">\r\n                {\r\n                    this.props.commonData.isLoading === true\r\n                    &&\r\n                    <div className=\"spinnerWrapper\">\r\n                        <Spinner className=\"spinner\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    </div>\r\n                }\r\n                {\r\n                    (this.props && this.props.commonData && this.props.reconData)\r\n                    &&\r\n                    <ReConForm onChange={this.onChange} reset={this.reset} runJob={this.runJob} processFile={this.processFile} formData={formData}></ReConForm>\r\n                }\r\n                {\r\n                    (popUpData && popUpData.display === 'show')\r\n                    &&\r\n                    <PopUp\r\n                        title={popUpData.title}\r\n                        body={popUpData.body}\r\n                        confirmBtn={popUpData.confirmBtn}\r\n                        cancelBtn={popUpData.cancelBtn}\r\n                        onClose={this.onPopupClose}\r\n                        show={popUpData.display === 'show' ? true : false}\r\n                        display={popUpData.display} />\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSystems();\r\n    }\r\n}\r\n\r\nReCon.propTypes = {\r\n    getSystems: PropTypes.func.isRequired,\r\n    getSourceTable: PropTypes.func.isRequired,\r\n    getCassandraTable: PropTypes.func.isRequired,\r\n    runReConJob: PropTypes.func.isRequired,\r\n    processFile: PropTypes.func.isRequired,\r\n\r\n    commonData: PropTypes.any,\r\n    reconData: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    commonData: state.commonDataReducer,\r\n    reconData: state.reConReducer\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getSystems,\r\n    getSourceTable,\r\n    getCassandraTable,\r\n    runReConJob,\r\n    processFile\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ReCon);","import * as types from '../../shared/constants';\r\n\r\nconst reconFileProcessingRequestsStarted = () => ({\r\n    type: types.RECON_FILE_PROCESSING_REQUESTS_STARTED\r\n});\r\n\r\nconst reconFileProcessingRequestsSucceeded = data => ({\r\n    type: types.RECON_FILE_PROCESSING_REQUESTS_SUCCEEDED,\r\n    reconFileProcessingRequestsPayload: data\r\n});\r\n\r\nconst reconFileProcessingRequestsFailed = error => ({\r\n    type: types.RECON_FILE_PROCESSING_REQUESTS_FAILED,\r\n    reconFileProcessingRequestsError: error,\r\n    error: true\r\n});\r\n\r\nexport const reconFileProcessingRequests = () => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    const reqBody = {\r\n        isRecon : 1\r\n    };\r\n\r\n    return function (dispatch) {\r\n        dispatch(reconFileProcessingRequestsStarted());\r\n        return fetch(types.DEV_API + \"/getProcessingRequests\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(reqBody),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(reconFileProcessingRequestsSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(reconFileProcessingRequestsFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n\r\n\r\nconst runReConJobStarted = () => ({\r\n    type: types.RUN_INIT_JOB_STARTED\r\n});\r\n\r\nconst runReConJobSucceeded = data => ({\r\n    type: types.RUN_INIT_JOB_SUCCEEDED,\r\n    runReConJobPayload: data\r\n});\r\n\r\nconst runReConJobFailed = error => ({\r\n    type: types.RUN_INIT_JOB_FAILED,\r\n    runReConJobError: error,\r\n    error: true\r\n});\r\n\r\nexport const runReConJob = (body) => {\r\n    let headers = new Headers();\r\n    headers.append('Content-type', 'application/json');\r\n    headers.append('Access-Control-Allow-Origin', '*');\r\n    headers.append('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n    headers.append('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept, x-auth\");\r\n\r\n    return function (dispatch) {\r\n        dispatch(runReConJobStarted());\r\n        return fetch(types.DEV_API + \"/runReConJob\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: headers\r\n        })\r\n            .then(\r\n                response => response.json()\r\n            )\r\n            .then(\r\n                (res) => {\r\n                    dispatch(runReConJobSucceeded(res))\r\n                },\r\n                (error) => {\r\n                    dispatch(runReConJobFailed(error))\r\n                }\r\n            );\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { initFileProcessingRequests, reconFileProcessingRequests } from '../redux/actions';\r\nimport { ReactTable } from \"../shared\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            initThead: [\r\n                [{\r\n                    colspan: 7,\r\n                    thead: 'Init Record'\r\n                }], [\r\n                    'Id',\r\n                    'System',\r\n                    'Source Tables',\r\n                    'Cassandra Tables',\r\n                    'Environment',\r\n                    'Instance',\r\n                    'Status'\r\n                ],\r\n            ],\r\n            reconThead: [\r\n                [{\r\n                    colspan: 8,\r\n                    thead: 'ReCon Record'\r\n                }], [\r\n                    'Id',\r\n                    'System',\r\n                    'Source Tables',\r\n                    'Cassandra Tables',\r\n                    'Environment',\r\n                    'Instance',\r\n                    'Frequency',\r\n                    'Status'\r\n                ],\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {initThead, reconThead} = this.state;\r\n\r\n        let initTbody = [];\r\n        if (this.props.iniitData && this.props.iniitData.initfileProcessingRequestsPayload && this.props.iniitData.initfileProcessingRequestsPayload.fileProcessingRequests) {\r\n            this.props.iniitData.initfileProcessingRequestsPayload.fileProcessingRequests.map(ele => {\r\n                initTbody.push([\r\n                    ele.id,\r\n                    ele.systemName,\r\n                    ele.souceTable.toString(),\r\n                    ele.cassandraTable.toString(),\r\n                    ele.environment,\r\n                    ele.instance,\r\n                    ele.status,\r\n                ]);\r\n                return initTbody;\r\n            })\r\n        }\r\n\r\n        let reconTbody = [];\r\n        if (this.props.reConData && this.props.reConData.reconfileProcessingRequestsPayload && this.props.reConData.reconfileProcessingRequestsPayload.fileProcessingRequests) {\r\n            this.props.reConData.reconfileProcessingRequestsPayload.fileProcessingRequests.map(ele => {\r\n                reconTbody.push([\r\n                    ele.id,\r\n                    ele.systemName,\r\n                    ele.souceTable.toString(),\r\n                    ele.cassandraTable.toString(),\r\n                    ele.environment,\r\n                    ele.instance,\r\n                    '',\r\n                    ele.status,\r\n                ]);\r\n                return reconTbody;\r\n            })\r\n        }        \r\n        return (\r\n            <div className=\"row justify-content-md-center\">\r\n                {\r\n                    (this.props.commonData && this.props.commonData.isLoading === true)\r\n                    &&\r\n                    <div className=\"spinnerWrapper\">\r\n                        <Spinner className=\"spinner\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    </div>\r\n                }\r\n\r\n                <ReactTable thead={initThead} tbody={initTbody} parentClassName=\"col-11 mb-5\" />\r\n                <ReactTable thead={reconThead} tbody={reconTbody} parentClassName=\"col-11\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.initFileProcessingRequests();\r\n        await this.props.reconFileProcessingRequests();\r\n    }\r\n}\r\n\r\nHome.propTypes = {\r\n    initFileProcessingRequests: PropTypes.func.isRequired,\r\n    reconFileProcessingRequests: PropTypes.func.isRequired,\r\n\r\n    iniitData: PropTypes.any,\r\n    reConData: PropTypes.any,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    iniitData: state.initReducer,\r\n    reConData: state.reConReducer,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    initFileProcessingRequests,\r\n    reconFileProcessingRequests\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport {Dashboard} from './containers';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    commonData: {\r\n        staticData: {\r\n            environments: [{value:'T1', label: 'T1'}, {value:'T2', label: 'T2'}, {value:'T3', label: 'T3'}, {value:'T4', label: 'T4'}],\r\n            instances: [{value: 'East', label:'East'}, {value: 'West', label:'West'}, {value: 'North', label:'North'}, {value: 'B2B', label:'B2B'}],\r\n            frequency: [{value:'Daily', label:'Daily'}, {value:'Weekly', label:'Weekly'}, {value:'Monthly', label:'Monthly'}],\r\n            systems: [],\r\n            sourceTable: [],\r\n            cassandraTable: [],\r\n        },\r\n        isLoading: false,\r\n        error: false\r\n    },\r\n\r\n    initForm: {\r\n        formField: {\r\n            system: '',\r\n            sourceTable: '',\r\n            cassandraTable: '',\r\n            environment: '',\r\n            instance: '',\r\n        },\r\n        formErrors: {\r\n            system: '',\r\n            sourceTable: '',\r\n            cassandraTable: '',\r\n            environment: '',\r\n            instance: '',\r\n        },\r\n        disableRunInitJob: true,\r\n        disableProccessInitFile: true,\r\n        popUpData: {\r\n            display: 'hide',\r\n            title: '',\r\n            body: '',\r\n            confirmBtn: '',\r\n            cancelBtn: '',\r\n        },\r\n        isLoading: false,\r\n        error: false\r\n    },\r\n    \r\n    reConForm: {\r\n        formField: {\r\n            system: '',\r\n            sourceTable: '',\r\n            cassandraTable: '',\r\n            environment: '',\r\n            instance: '',\r\n            frequency: '',\r\n        },\r\n        formErrors: {\r\n            system: '',\r\n            sourceTable: '',\r\n            cassandraTable: '',\r\n            environment: '',\r\n            instance: '',\r\n            frequency: '',\r\n        },\r\n        disableRunReConJob: true,\r\n        disableProccessReConFile: true,\r\n        popUpData: {\r\n            display: 'hide',\r\n            title: '',\r\n            body: '',\r\n            confirmBtn: '',\r\n            cancelBtn: '',\r\n        },\r\n        isLoading: false,\r\n        error: false\r\n    },    \r\n}\r\nexport default initialState;","import * as types from '../../shared/constants';\r\nimport initialState from './initialState';\r\n\r\nconst commonDataReducer = (state = initialState.commonData, action) => {\r\n    switch (action.type) {\r\n        case types.GET_SYSTEM_STARTED: case types.GET_SOURCE_TABLE_STARTED: case types.GET_CASSANDRA_TABLE_STARTED: case types.PROCESS_FILE_STARTED:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: false\r\n            };\r\n        case types.GET_SYSTEM_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                staticData: {\r\n                    ...state.staticData,\r\n                    systems: action.getSystemsPayload.systems ? action.getSystemsPayload.systems.map((element, index) => {\r\n                        return {\r\n                            value: element.systemId,\r\n                            label: element.systemName,\r\n                        }\r\n                    }) : [],\r\n                },\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.GET_SYSTEM_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.getSystemsError\r\n            }\r\n        case types.GET_SOURCE_TABLE_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                staticData: {\r\n                    ...state.staticData,\r\n                    sourceTable: action.getSourceTablePayload.sourceTables ? action.getSourceTablePayload.sourceTables.map((element, index) => {\r\n                        return {\r\n                            value: element.sourceTableId,\r\n                            label: element.sourceTableName,\r\n                            ref: element.refernece\r\n                        }\r\n                    }) : [],\r\n                },\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.GET_SOURCE_TABLE_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.getSourceTableError\r\n            }\r\n        case types.GET_CASSANDRA_TABLE_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                staticData: {\r\n                    ...state.staticData,\r\n                    cassandraTable: action.getCassandraTablePayload.cassandraTables ? action.getCassandraTablePayload.cassandraTables.map((element, index) => {\r\n                        return {\r\n                            value: element.cassandraTableId,\r\n                            label: element.cassandraTableName,\r\n                        }\r\n                    }) : [],\r\n                },\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.GET_CASSANDRA_TABLE_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.getCassandraTableError\r\n            }\r\n        case types.PROCESS_FILE_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                processFilePayload: action.processFilePayload,\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.PROCESS_FILE_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                processFileError: action.processFileError,\r\n                error: action.processFileError\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default commonDataReducer;","import * as types from '../../shared/constants';\r\nimport initialState from './initialState';\r\n\r\nconst initReducer = (state = initialState.initForm, action) => {\r\n    switch (action.type) {\r\n        case types.INIT_FILE_PROCESSING_REQUESTS_STARTED:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: false\r\n            };\r\n        case types.INIT_FILE_PROCESSING_REQUESTS_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                initfileProcessingRequestsPayload: action.initFileProcessingRequestsPayload,\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.INIT_FILE_PROCESSING_REQUESTS_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                initfileProcessingRequestsError: action.initFileProcessingRequestsError,\r\n                error: action.getFileProcessingRequestsError\r\n            }\r\n\r\n\r\n        case types.RUN_INIT_JOB_STARTED:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: false\r\n            };\r\n        case types.RUN_INIT_JOB_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                runInitJobPayload: action.runInitJobPayload,\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.RUN_INIT_JOB_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.runInitJobError\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default initReducer;","import * as types from '../../shared/constants';\r\nimport initialState from './initialState';\r\n\r\nconst reConReducer = (state = initialState.reConForm, action) => {\r\n    switch (action.type) {\r\n        case types.RECON_FILE_PROCESSING_REQUESTS_STARTED:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: false\r\n            };\r\n        case types.RECON_FILE_PROCESSING_REQUESTS_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                reconfileProcessingRequestsPayload: action.reconFileProcessingRequestsPayload,\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.RECON_FILE_PROCESSING_REQUESTS_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                reconfileProcessingRequestsError: action.reconFileProcessingRequestsError,\r\n                error: action.getFileProcessingRequestsError\r\n            }\r\n\r\n        case types.RUN_RECON_JOB_STARTED:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: false\r\n            };\r\n        case types.RUN_RECON_JOB_SUCCEEDED:\r\n            return {\r\n                ...state,\r\n                runReConJobPayload: action.runReConJobPayload,\r\n                isLoading: false,\r\n                error: false\r\n            }\r\n        case types.RUN_RECON_JOB_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.runReConJobError\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reConReducer;","import { combineReducers } from 'redux';\r\nimport commonDataReducer from \"./commonDataReducer\";\r\nimport initReducer from \"./initReducer\";\r\nimport reConReducer from \"./reConReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    initReducer,\r\n    reConReducer,\r\n    commonDataReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nlet enhancer = applyMiddleware(thunk);\r\n\r\nexport const configureStore = () => {\r\n  return createStore(rootReducer, enhancer);\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureStore } from './redux';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.min.js';\n\nserviceWorker.unregister();\n\nconst defaultRender = () => {\n    const store = configureStore();\n    ReactDOM.render(\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>,\n        document.getElementById('root')\n    );\n};\n\ndefaultRender();"],"sourceRoot":""}